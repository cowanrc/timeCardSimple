// Code generated by MockGen. DO NOT EDIT.
// Source: timeCardSimple/domain/employee (interfaces: Repo)

// Package employeetest is a generated GoMock package.
package employeetest

import (
	context "context"
	reflect "reflect"
	employee "timeCardSimple/domain/employee"
	id "timeCardSimple/domain/id"

	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddEmployee mocks base method.
func (m *MockRepo) AddEmployee(arg0 context.Context, arg1 *employee.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmployee", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEmployee indicates an expected call of AddEmployee.
func (mr *MockRepoMockRecorder) AddEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmployee", reflect.TypeOf((*MockRepo)(nil).AddEmployee), arg0, arg1)
}

// GetEmployeeByEmail mocks base method.
func (m *MockRepo) GetEmployeeByEmail(arg0 context.Context, arg1 string) (*employee.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByEmail", arg0, arg1)
	ret0, _ := ret[0].(*employee.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByEmail indicates an expected call of GetEmployeeByEmail.
func (mr *MockRepoMockRecorder) GetEmployeeByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByEmail", reflect.TypeOf((*MockRepo)(nil).GetEmployeeByEmail), arg0, arg1)
}

// GetEmployeeByID mocks base method.
func (m *MockRepo) GetEmployeeByID(arg0 context.Context, arg1 id.ID) (*employee.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByID", arg0, arg1)
	ret0, _ := ret[0].(*employee.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByID indicates an expected call of GetEmployeeByID.
func (mr *MockRepoMockRecorder) GetEmployeeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByID", reflect.TypeOf((*MockRepo)(nil).GetEmployeeByID), arg0, arg1)
}

// RemoveEmployee mocks base method.
func (m *MockRepo) RemoveEmployee(arg0 context.Context, arg1 id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEmployee", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEmployee indicates an expected call of RemoveEmployee.
func (mr *MockRepoMockRecorder) RemoveEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEmployee", reflect.TypeOf((*MockRepo)(nil).RemoveEmployee), arg0, arg1)
}
